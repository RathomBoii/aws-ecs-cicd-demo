name: "CICD - ECS Frontend Automation Pipeline Test"

on:
    push:
        branches: [main]
        paths:
            - "frontend/**"
    pull_request:
        branches: [main]
        paths:
            - "frontend/**"
    # enable manually start workflow
    workflow_dispatch:

env:
  AWS_REGION: ap-southeast-1  
  ECR_REPOSITORY: ecs-test-pipeline/frontend          
  ECS_CLUSTER: ecs-test-pipeline
  ECS_SERVICE: frontend
  ECS_TASK_DEFINITION: .github/ecs/frontend_taskdefinition.json
  CONTAINER_NAME: frontend-nextjs

permissions:
    id-token: write # This is required for requesting the JWT
    contents: write # This is required for actions/checkout

jobs:
  build:
    name: Build Image
    runs-on: ubuntu-latest
    environment: dev
    steps:

      - name: Checkout
        uses: actions/checkout@v4

# ref: https://github.com/aws-actions/configure-aws-credentials
      - name: "Configure AWS credentials"
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.ECS_TEST_PIPELINE_GITHUB_RUNNER_OIDC_ROLE }}
          role-session-name: GitHubActions
          aws-region: ${{ env.AWS_REGION }}

# ref: https://github.com/aws-actions/amazon-ecr-login
      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build, tag, and push image to Amazon ECR
        id: build-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          IMAGE_TAG: ${{ github.sha }}
          CONTEXT: "frontend"
        run: |
          cd $CONTEXT
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          
          # allow other step can refer to this image   
          echo "image=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_OUTPUT
          
          # TAG dev
          docker tag $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG $ECR_REGISTRY/$ECR_REPOSITORY:dev
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:dev
          
          # TAG LATEST
          docker tag $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG $ECR_REGISTRY/$ECR_REPOSITORY:latest
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:latest

      - name: Run Trivy vulnerability scanner
        id: scan-image
        env:
            ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
            IMAGE_TAG: ${{ github.sha }}
        uses: aquasecurity/trivy-action@0.28.0
        with:
          image-ref: ${{ env.ECR_REGISTRY }}/${{ env.ECR_REPOSITORY }}:${{ env.IMAGE_TAG }}
          format: 'table'
          exit-code: '1'
          ignore-unfixed: true
          vuln-type: 'os,library'
          severity: 'CRITICAL,HIGH'

  deploy:
    name: Deploy
    runs-on: ubuntu-latest
    environment: dev
    needs: Build
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: "Configure AWS credentials"
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.ECS_TEST_PIPELINE_GITHUB_RUNNER_OIDC_ROLE }}
          role-session-name: GitHubActions
          aws-region: ${{ env.AWS_REGION }}

      - name: Deploy Amazon ECS task definition
        uses: aws-actions/amazon-ecs-deploy-task-definition@v1
        with:
          # task-definition: ${{ steps.task-def.outputs.task-definition }}
          task-definition: ${{ env.ECS_TASK_DEFINITION }}
          service: ${{ env.ECS_SERVICE }}
          cluster: ${{ env.ECS_CLUSTER }}
          wait-for-service-stability: true
